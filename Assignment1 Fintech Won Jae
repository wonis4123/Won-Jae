{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stock Name: Apple\n",
      "Market Cap: $2640000000000\n",
      "Return on Equity (ROE): 171.95%\n",
      "Earnings Per Share (EPS): $6.13\n",
      "Price-to-Earnings (PE) Ratio: 30.37\n",
      "5-Year Return: 372.24%\n",
      "\n",
      "Stock Name: Google\n",
      "Market Cap: $1789000000000\n",
      "Return on Equity (ROE): 25.330000000000002%\n",
      "Earnings Per Share (EPS): $5.22\n",
      "Price-to-Earnings (PE) Ratio: 27.55\n",
      "5-Year Return: 159.61%\n",
      "\n",
      "Stock Name: Amazon\n",
      "Market Cap: $1589000000000\n",
      "Return on Equity (ROE): 12.53%\n",
      "Earnings Per Share (EPS): $1.91\n",
      "Price-to-Earnings (PE) Ratio: 80.49\n",
      "5-Year Return: 78.48%\n",
      "\n",
      "Stock Name: Tesla\n",
      "Market Cap: $743677000000\n",
      "Return on Equity (ROE): 22.49%\n",
      "Earnings Per Share (EPS): $3.1\n",
      "Price-to-Earnings (PE) Ratio: 75.46\n",
      "5-Year Return: 1066.02%\n",
      "\n",
      "Stock Name: Berkshire Hathaway B\n",
      "Market Cap: $800443000000\n",
      "Return on Equity (ROE): 15.540000000000001%\n",
      "Earnings Per Share (EPS): $35.11\n",
      "Price-to-Earnings (PE) Ratio: 10.48\n",
      "5-Year Return: 79.43%\n",
      "\n",
      "Weighted Average Return: 1755.78%\n"
     ]
    }
   ],
   "source": [
    "class Stock:\n",
    "    # class that contains data and functions to calculate and print data\n",
    "    def __init__(self, name, market_cap, roe, eps, pe, five_year_return):\n",
    "        self.name = name\n",
    "        self.market_cap = market_cap\n",
    "        self.roe = roe\n",
    "        self.eps = eps\n",
    "        self.pe = pe\n",
    "        self.five_year_return = five_year_return\n",
    "\n",
    "    def display_info(self):\n",
    "        print(f\"Stock Name: {self.name}\")\n",
    "        print(f\"Market Cap: ${self.market_cap}\")\n",
    "        print(f\"Return on Equity (ROE): {self.roe*100}%\")\n",
    "        print(f\"Earnings Per Share (EPS): ${self.eps}\")\n",
    "        print(f\"Price-to-Earnings (PE) Ratio: {self.pe}\")\n",
    "        print(f\"5-Year Return: {self.five_year_return*100}%\")\n",
    "        print()\n",
    "\n",
    "    def weighted_average_return(self, weights):\n",
    "        weighted_sum = (\n",
    "            (weights['market_cap'] * self.five_year_return) +\n",
    "            (weights['roe'] * self.five_year_return) +\n",
    "            (weights['eps'] * self.five_year_return) +\n",
    "            (weights['pe'] * self.five_year_return)\n",
    "        )\n",
    "        total_weight = sum(weights.values())\n",
    "        return weighted_sum / total_weight\n",
    "\n",
    "# Example usage\n",
    "Appl = Stock(\"Apple\", 2640000000000, 1.7195, 6.13, 30.37, 3.7224)\n",
    "Goog = Stock(\"Google\", 1789000000000, .2533, 5.22, 27.55, 1.5961)\n",
    "Amzn = Stock(\"Amazon\", 1589000000000, .1253, 1.91, 80.49, .7848)\n",
    "Tsla = Stock(\"Tesla\", 743677000000, .2249, 3.1, 75.46, 10.6602)\n",
    "Brkb = Stock(\"Berkshire Hathaway B\", 800443000000, .1554, 35.11, 10.48, .7943)\n",
    "\n",
    "# weight on calculation\n",
    "weights = {\n",
    "    'market_cap': 0.25,\n",
    "    'roe': 0.25,\n",
    "    'eps': 0.25,\n",
    "    'pe': 0.25,\n",
    "}\n",
    "\n",
    "# Calculate the weighted average return\n",
    "weighted_avg_return = (\n",
    "    Appl.weighted_average_return(weights) +\n",
    "    Goog.weighted_average_return(weights) +\n",
    "    Amzn.weighted_average_return(weights) +\n",
    "    Tsla.weighted_average_return(weights) +\n",
    "    Brkb.weighted_average_return(weights)\n",
    ")\n",
    "\n",
    "# Display individual stock information\n",
    "Appl.display_info()\n",
    "Goog.display_info()\n",
    "Amzn.display_info()\n",
    "Tsla.display_info()\n",
    "Brkb.display_info()\n",
    "\n",
    "# Display the corrected weighted average return\n",
    "print(f\"Weighted Average Return: {weighted_avg_return:.2%}\")\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
